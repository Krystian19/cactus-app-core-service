// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/language.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Language struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsoCode              string   `protobuf:"bytes,3,opt,name=iso_code,json=isoCode,proto3" json:"iso_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Language) Reset()         { *m = Language{} }
func (m *Language) String() string { return proto.CompactTextString(m) }
func (*Language) ProtoMessage()    {}
func (*Language) Descriptor() ([]byte, []int) {
	return fileDescriptor_11b79a1b8494d8c8, []int{0}
}

func (m *Language) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Language.Unmarshal(m, b)
}
func (m *Language) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Language.Marshal(b, m, deterministic)
}
func (m *Language) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Language.Merge(m, src)
}
func (m *Language) XXX_Size() int {
	return xxx_messageInfo_Language.Size(m)
}
func (m *Language) XXX_DiscardUnknown() {
	xxx_messageInfo_Language.DiscardUnknown(m)
}

var xxx_messageInfo_Language proto.InternalMessageInfo

func (m *Language) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Language) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Language) GetIsoCode() string {
	if m != nil {
		return m.IsoCode
	}
	return ""
}

type LanguageRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LanguageRequest) Reset()         { *m = LanguageRequest{} }
func (m *LanguageRequest) String() string { return proto.CompactTextString(m) }
func (*LanguageRequest) ProtoMessage()    {}
func (*LanguageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11b79a1b8494d8c8, []int{1}
}

func (m *LanguageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LanguageRequest.Unmarshal(m, b)
}
func (m *LanguageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LanguageRequest.Marshal(b, m, deterministic)
}
func (m *LanguageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageRequest.Merge(m, src)
}
func (m *LanguageRequest) XXX_Size() int {
	return xxx_messageInfo_LanguageRequest.Size(m)
}
func (m *LanguageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageRequest proto.InternalMessageInfo

func (m *LanguageRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LanguageResponse struct {
	Language             *Language `protobuf:"bytes,1,opt,name=Language,proto3" json:"Language,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LanguageResponse) Reset()         { *m = LanguageResponse{} }
func (m *LanguageResponse) String() string { return proto.CompactTextString(m) }
func (*LanguageResponse) ProtoMessage()    {}
func (*LanguageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11b79a1b8494d8c8, []int{2}
}

func (m *LanguageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LanguageResponse.Unmarshal(m, b)
}
func (m *LanguageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LanguageResponse.Marshal(b, m, deterministic)
}
func (m *LanguageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LanguageResponse.Merge(m, src)
}
func (m *LanguageResponse) XXX_Size() int {
	return xxx_messageInfo_LanguageResponse.Size(m)
}
func (m *LanguageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LanguageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LanguageResponse proto.InternalMessageInfo

func (m *LanguageResponse) GetLanguage() *Language {
	if m != nil {
		return m.Language
	}
	return nil
}

func init() {
	proto.RegisterType((*Language)(nil), "proto.Language")
	proto.RegisterType((*LanguageRequest)(nil), "proto.LanguageRequest")
	proto.RegisterType((*LanguageResponse)(nil), "proto.LanguageResponse")
}

func init() { proto.RegisterFile("proto/language.proto", fileDescriptor_11b79a1b8494d8c8) }

var fileDescriptor_11b79a1b8494d8c8 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x49, 0xcc, 0x4b, 0x2f, 0x4d, 0x4c, 0x4f, 0xd5, 0x03, 0x73, 0x85, 0x58, 0xc1,
	0x94, 0x92, 0x27, 0x17, 0x87, 0x0f, 0x54, 0x42, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x45, 0x82, 0x51,
	0x81, 0x51, 0x83, 0x39, 0x88, 0x29, 0x33, 0x45, 0x48, 0x88, 0x8b, 0x25, 0x2f, 0x31, 0x37, 0x55,
	0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x16, 0x92, 0xe4, 0xe2, 0xc8, 0x2c, 0xce, 0x8f,
	0x4f, 0xce, 0x4f, 0x49, 0x95, 0x60, 0x06, 0x8b, 0xb3, 0x67, 0x16, 0xe7, 0x3b, 0xe7, 0xa7, 0xa4,
	0x2a, 0x29, 0x72, 0xf1, 0xc3, 0x8c, 0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x41, 0x37, 0x51,
	0xc9, 0x9e, 0x4b, 0x00, 0xa1, 0xa4, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x1b, 0xe1, 0x02,
	0xb0, 0x4a, 0x6e, 0x23, 0x7e, 0x88, 0x13, 0xf5, 0xe0, 0x4a, 0xe1, 0x0a, 0x8c, 0xfc, 0x10, 0x76,
	0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x59, 0x23, 0xf9, 0x40, 0x0c, 0x5d, 0x27, 0xc4,
	0x1d, 0x52, 0xe2, 0x18, 0xe2, 0x10, 0xcb, 0x93, 0xd8, 0xc0, 0xe2, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x02, 0xbd, 0x29, 0xc9, 0x24, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LanguageServiceClient is the client API for LanguageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LanguageServiceClient interface {
	Language(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error)
}

type languageServiceClient struct {
	cc *grpc.ClientConn
}

func NewLanguageServiceClient(cc *grpc.ClientConn) LanguageServiceClient {
	return &languageServiceClient{cc}
}

func (c *languageServiceClient) Language(ctx context.Context, in *LanguageRequest, opts ...grpc.CallOption) (*LanguageResponse, error) {
	out := new(LanguageResponse)
	err := c.cc.Invoke(ctx, "/proto.LanguageService/Language", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageServiceServer is the server API for LanguageService service.
type LanguageServiceServer interface {
	Language(context.Context, *LanguageRequest) (*LanguageResponse, error)
}

// UnimplementedLanguageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLanguageServiceServer struct {
}

func (*UnimplementedLanguageServiceServer) Language(ctx context.Context, req *LanguageRequest) (*LanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Language not implemented")
}

func RegisterLanguageServiceServer(s *grpc.Server, srv LanguageServiceServer) {
	s.RegisterService(&_LanguageService_serviceDesc, srv)
}

func _LanguageService_Language_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageServiceServer).Language(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LanguageService/Language",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageServiceServer).Language(ctx, req.(*LanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LanguageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LanguageService",
	HandlerType: (*LanguageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Language",
			Handler:    _LanguageService_Language_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/language.proto",
}
