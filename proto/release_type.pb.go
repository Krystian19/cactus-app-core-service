// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/release_type.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReleaseType struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseType) Reset()         { *m = ReleaseType{} }
func (m *ReleaseType) String() string { return proto.CompactTextString(m) }
func (*ReleaseType) ProtoMessage()    {}
func (*ReleaseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6bc44837ed8d703, []int{0}
}

func (m *ReleaseType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseType.Unmarshal(m, b)
}
func (m *ReleaseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseType.Marshal(b, m, deterministic)
}
func (m *ReleaseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseType.Merge(m, src)
}
func (m *ReleaseType) XXX_Size() int {
	return xxx_messageInfo_ReleaseType.Size(m)
}
func (m *ReleaseType) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseType.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseType proto.InternalMessageInfo

func (m *ReleaseType) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReleaseType) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type ReleaseTypeRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseTypeRequest) Reset()         { *m = ReleaseTypeRequest{} }
func (m *ReleaseTypeRequest) String() string { return proto.CompactTextString(m) }
func (*ReleaseTypeRequest) ProtoMessage()    {}
func (*ReleaseTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6bc44837ed8d703, []int{1}
}

func (m *ReleaseTypeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseTypeRequest.Unmarshal(m, b)
}
func (m *ReleaseTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseTypeRequest.Marshal(b, m, deterministic)
}
func (m *ReleaseTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseTypeRequest.Merge(m, src)
}
func (m *ReleaseTypeRequest) XXX_Size() int {
	return xxx_messageInfo_ReleaseTypeRequest.Size(m)
}
func (m *ReleaseTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseTypeRequest proto.InternalMessageInfo

func (m *ReleaseTypeRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReleaseTypeResponse struct {
	ReleaseType          *ReleaseType `protobuf:"bytes,1,opt,name=release_type,json=releaseType,proto3" json:"release_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReleaseTypeResponse) Reset()         { *m = ReleaseTypeResponse{} }
func (m *ReleaseTypeResponse) String() string { return proto.CompactTextString(m) }
func (*ReleaseTypeResponse) ProtoMessage()    {}
func (*ReleaseTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6bc44837ed8d703, []int{2}
}

func (m *ReleaseTypeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseTypeResponse.Unmarshal(m, b)
}
func (m *ReleaseTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseTypeResponse.Marshal(b, m, deterministic)
}
func (m *ReleaseTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseTypeResponse.Merge(m, src)
}
func (m *ReleaseTypeResponse) XXX_Size() int {
	return xxx_messageInfo_ReleaseTypeResponse.Size(m)
}
func (m *ReleaseTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseTypeResponse proto.InternalMessageInfo

func (m *ReleaseTypeResponse) GetReleaseType() *ReleaseType {
	if m != nil {
		return m.ReleaseType
	}
	return nil
}

func init() {
	proto.RegisterType((*ReleaseType)(nil), "proto.ReleaseType")
	proto.RegisterType((*ReleaseTypeRequest)(nil), "proto.ReleaseTypeRequest")
	proto.RegisterType((*ReleaseTypeResponse)(nil), "proto.ReleaseTypeResponse")
}

func init() { proto.RegisterFile("proto/release_type.proto", fileDescriptor_f6bc44837ed8d703) }

var fileDescriptor_f6bc44837ed8d703 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4a, 0xcd, 0x49, 0x4d, 0x2c, 0x4e, 0x8d, 0x2f, 0xa9, 0x2c, 0x48, 0xd5, 0x03,
	0x0b, 0x09, 0xb1, 0x82, 0x29, 0x25, 0x63, 0x2e, 0xee, 0x20, 0x88, 0x64, 0x48, 0x65, 0x41, 0xaa,
	0x10, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x53, 0x66, 0x8a,
	0x90, 0x08, 0x17, 0x6b, 0x49, 0x66, 0x49, 0x4e, 0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x67, 0x10,
	0x84, 0xa3, 0xa4, 0xc2, 0x25, 0x84, 0xa4, 0x29, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x04, 0x5d,
	0xaf, 0x92, 0x0f, 0x97, 0x30, 0x8a, 0xaa, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x53, 0x2e,
	0x1e, 0x64, 0xe7, 0x80, 0x35, 0x70, 0x1b, 0x09, 0x41, 0x9c, 0xa5, 0x87, 0xac, 0x83, 0xbb, 0x08,
	0xc1, 0x31, 0x8a, 0x42, 0xb1, 0x33, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x05, 0xd5,
	0xf9, 0x92, 0x58, 0x4c, 0x81, 0xb8, 0x4e, 0x4a, 0x0a, 0x9b, 0x14, 0xc4, 0x49, 0x49, 0x6c, 0x60,
	0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0x88, 0xe8, 0xdd, 0x2e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ReleaseTypeServiceClient is the client API for ReleaseTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReleaseTypeServiceClient interface {
	ReleaseType(ctx context.Context, in *ReleaseTypeRequest, opts ...grpc.CallOption) (*ReleaseTypeResponse, error)
}

type releaseTypeServiceClient struct {
	cc *grpc.ClientConn
}

func NewReleaseTypeServiceClient(cc *grpc.ClientConn) ReleaseTypeServiceClient {
	return &releaseTypeServiceClient{cc}
}

func (c *releaseTypeServiceClient) ReleaseType(ctx context.Context, in *ReleaseTypeRequest, opts ...grpc.CallOption) (*ReleaseTypeResponse, error) {
	out := new(ReleaseTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.ReleaseTypeService/ReleaseType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseTypeServiceServer is the server API for ReleaseTypeService service.
type ReleaseTypeServiceServer interface {
	ReleaseType(context.Context, *ReleaseTypeRequest) (*ReleaseTypeResponse, error)
}

// UnimplementedReleaseTypeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReleaseTypeServiceServer struct {
}

func (*UnimplementedReleaseTypeServiceServer) ReleaseType(ctx context.Context, req *ReleaseTypeRequest) (*ReleaseTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseType not implemented")
}

func RegisterReleaseTypeServiceServer(s *grpc.Server, srv ReleaseTypeServiceServer) {
	s.RegisterService(&_ReleaseTypeService_serviceDesc, srv)
}

func _ReleaseTypeService_ReleaseType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseTypeServiceServer).ReleaseType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReleaseTypeService/ReleaseType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseTypeServiceServer).ReleaseType(ctx, req.(*ReleaseTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReleaseTypeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReleaseTypeService",
	HandlerType: (*ReleaseTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReleaseType",
			Handler:    _ReleaseTypeService_ReleaseType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/release_type.proto",
}
